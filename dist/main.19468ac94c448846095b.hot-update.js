"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "main";
exports.ids = null;
exports.modules = {

/***/ "./src/uploads/uploadService.ts":
/*!**************************************!*\
  !*** ./src/uploads/uploadService.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.convertImage = void 0;\nvar multer_1 = __importDefault(__webpack_require__(/*! multer */ \"multer\"));\nvar multer_s3_1 = __importDefault(__webpack_require__(/*! multer-s3 */ \"multer-s3\"));\nvar aws_sdk_1 = __importDefault(__webpack_require__(/*! aws-sdk */ \"aws-sdk\"));\nvar btoa_1 = __importDefault(__webpack_require__(/*! btoa */ \"btoa\"));\nvar util_1 = __webpack_require__(/*! util */ \"util\");\nvar fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\nvar config_1 = __importDefault(__webpack_require__(/*! ../config */ \"./src/config/index.ts\"));\nvar convert = __webpack_require__(/*! heic-convert */ \"heic-convert\");\nvar uuidv1 = (__webpack_require__(/*! uuid */ \"uuid\").v1);\naws_sdk_1.default.config.update({\n    accessKeyId: process.env.AWS_SES_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SES_SECRET_ACCESS_KEY,\n    region: process.env.AWS_SES_REGION,\n});\nconsole.log(process.env.AWS_SES_ACCESS_KEY_ID, process.env.AWS_SES_REGION);\nvar S3 = new aws_sdk_1.default.S3();\nvar uploadmedia = function (file, userId, mediaId, key) {\n    return new Promise(function (resolve, reject) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var entity, newKey, params;\n            var _this = this;\n            return __generator(this, function (_c) {\n                entity = \"companysite/\".concat(process.env.nodeEnv, \"/\").concat(userId);\n                newKey = \"\".concat(entity, \"/\").concat(uuidv1());\n                params = {\n                    Bucket: (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a.BUCKET) !== null && _b !== void 0 ? _b : \"\",\n                    Key: newKey,\n                    Body: file,\n                };\n                S3.upload(params, function (err, data) { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (data) {\n                            resolve(data);\n                        }\n                        else {\n                            console.log(\"Error>>\", err);\n                            reject(\"Upload media error\");\n                        }\n                        return [2];\n                    });\n                }); });\n                return [2];\n            });\n        });\n    });\n};\nvar convertImage = function (file) {\n    return new Promise(function (resolve, reject) {\n        return __awaiter(this, void 0, void 0, function () {\n            var path_1, inputBuffer, outputBuffer, result, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 7, , 8]);\n                        path_1 = \"\".concat(file.destination, \"/\").concat(file.filename);\n                        return [4, (0, util_1.promisify)(fs_1.default.readFile)(path_1)];\n                    case 1:\n                        inputBuffer = _a.sent();\n                        return [4, convert({\n                                buffer: inputBuffer,\n                                format: \"JPEG\",\n                                quality: 1,\n                            })];\n                    case 2:\n                        outputBuffer = _a.sent();\n                        if (!outputBuffer) return [3, 6];\n                        if (!fs_1.default.existsSync(path_1)) return [3, 4];\n                        return [4, fs_1.default.unlinkSync(path_1)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [4, uploadmedia(outputBuffer, file.userId)];\n                    case 5:\n                        result = _a.sent();\n                        resolve(result);\n                        _a.label = 6;\n                    case 6: return [3, 8];\n                    case 7:\n                        error_1 = _a.sent();\n                        console.log(\"heic conversion erorr===>:-\", error_1);\n                        return [3, 8];\n                    case 8: return [2];\n                }\n            });\n        });\n    });\n};\nexports.convertImage = convertImage;\nexports[\"default\"] = {\n    upload: function (req, res) {\n        return new Promise(function (resolve, reject) {\n            var _this = this;\n            var _a, _b, _c, _d;\n            try {\n                var userId = ((_a = req.query) === null || _a === void 0 ? void 0 : _a.userId) ? req.query.userId : (_b = req.user) === null || _b === void 0 ? void 0 : _b._id;\n                var entity_1 = \"companysite/\".concat(config_1.default.environment, \"/\").concat(userId);\n                var storage = void 0;\n                var type_1 = req.query.fileType ? req.query.fileType : \"image\";\n                console.log(type_1, userId, entity_1, process.env.BUCKET);\n                if (type_1 === \"image\") {\n                    storage = (0, multer_s3_1.default)({\n                        s3: S3,\n                        bucket: (_d = (_c = process.env) === null || _c === void 0 ? void 0 : _c.BUCKET) !== null && _d !== void 0 ? _d : \"\",\n                        metadata: function (req, file, cb) {\n                            cb(null, {\n                                fileName: file.originalname,\n                                mimetype: file.mimetype,\n                            });\n                        },\n                        key: function (req, file, cb) {\n                            cb(null, entity_1 + \"/\" + uuidv1());\n                        },\n                    });\n                }\n                else {\n                    storage = multer_1.default.diskStorage({\n                        destination: function (req, file, callback) {\n                            if (type_1 === \"convert\") {\n                                var path_2 = \"./media\";\n                                if (!fs_1.default.existsSync(path_2)) {\n                                    fs_1.default.mkdirSync(path_2);\n                                }\n                                callback(null, path_2);\n                            }\n                        },\n                        filename: function (req, file, callback) {\n                            var fileEx = /(?:\\.([^.]+))?$/.exec(file.originalname);\n                            callback(null, \"\".concat(uuidv1()).concat(fileEx[0]));\n                        },\n                    });\n                }\n                var upload = (0, multer_1.default)({\n                    storage: storage,\n                }).any();\n                if (upload) {\n                    upload(req, res, function (error) { return __awaiter(_this, void 0, void 0, function () {\n                        var data, result, obj;\n                        var _a;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    console.log(\"image upload error\", error);\n                                    if (!error) return [3, 1];\n                                    return [2, reject({\n                                            error: true,\n                                            status: 400,\n                                            message: error.message,\n                                        })];\n                                case 1:\n                                    if (!(type_1 === \"convert\")) return [3, 3];\n                                    data = req.files[0];\n                                    data.userId = (_a = req.user) === null || _a === void 0 ? void 0 : _a._id;\n                                    return [4, (0, exports.convertImage)(data)];\n                                case 2:\n                                    result = _b.sent();\n                                    obj = {\n                                        fieldname: data.fieldname,\n                                        originalname: data.originalname,\n                                        encoding: \"7bit\",\n                                        mimetype: \"image/jpeg\",\n                                        size: data.size,\n                                        bucket: result.Bucket || result.bucket,\n                                        key: result.Key || result.key,\n                                        location: data.Location,\n                                    };\n                                    req.files[0] = obj;\n                                    return [2, resolve({\n                                            error: false,\n                                            status: 200,\n                                            result: req.files,\n                                            message: \"File uploaded\",\n                                        })];\n                                case 3: return [2, resolve({\n                                        error: false,\n                                        status: 200,\n                                        result: req.files,\n                                        message: \"File uploaded\",\n                                    })];\n                            }\n                        });\n                    }); });\n                }\n                else {\n                    return reject({\n                        error: true,\n                        status: 404,\n                        message: \"File not uploaded\",\n                    });\n                }\n            }\n            catch (e) {\n                console.log(\"uploade error\", e);\n                return reject({\n                    error: true,\n                    status: 500,\n                    message: \"Server error \" + e,\n                });\n            }\n        });\n    },\n    get: function (req) {\n        return new Promise(function (resolve, reject) {\n            var _a;\n            try {\n                var image = JSON.stringify({\n                    bucket: (_a = process.env) === null || _a === void 0 ? void 0 : _a.BUCKET,\n                    key: req.query.key,\n                    edits: {\n                        resize: {\n                            width: parseInt(req.query.width),\n                            height: parseInt(req.query.height),\n                            fit: req.query.fit,\n                        },\n                        normalise: true,\n                    },\n                });\n                var cdnImage = void 0;\n                if (req.query.key.includes(\"/v/\")) {\n                    if (req.query.key.includes(\"thumbnail\")) {\n                        cdnImage = (0, btoa_1.default)(image);\n                    }\n                    else {\n                        cdnImage = req.query.key;\n                    }\n                }\n                else {\n                    cdnImage = (0, btoa_1.default)(image);\n                }\n                var url = \"\".concat(process.env.CDN_URL, \"/\").concat(cdnImage);\n                return resolve({\n                    status: 200,\n                    error: false,\n                    url: url,\n                    message: \"Success\",\n                });\n            }\n            catch (e) {\n                console.log(e, \"error\");\n                return reject({\n                    error: true,\n                    status: 400,\n                    message: \"Server error \" + e,\n                });\n            }\n        });\n    },\n    delete: function (req, res) {\n        return new Promise(function (resolve, reject) {\n            var _a, _b, _c;\n            try {\n                var media = req.body.mediaId;\n                var params = {\n                    Bucket: (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a.BUCKET) !== null && _b !== void 0 ? _b : \"\",\n                    Key: (_c = media === null || media === void 0 ? void 0 : media.mediaFile) === null || _c === void 0 ? void 0 : _c.key,\n                };\n                S3.deleteObject(params, function (err, data) {\n                    if (err) {\n                        return reject({\n                            error: true,\n                            status: 400,\n                            message: err.message,\n                        });\n                    }\n                    else {\n                        return resolve({\n                            error: false,\n                            status: 200,\n                            result: data,\n                            message: \"File Deleted Successfully.\",\n                        });\n                    }\n                });\n            }\n            catch (error) {\n                return reject({\n                    error: true,\n                    status: 500,\n                    message: \"Server error \" + error,\n                });\n            }\n        });\n    },\n    update: function (req) {\n        return new Promise(function (resolve, reject) {\n            var _a, _b;\n            return __awaiter(this, void 0, void 0, function () {\n                var params;\n                return __generator(this, function (_c) {\n                    try {\n                        params = {\n                            Body: req.body.mediaFile,\n                            Bucket: (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a.BUCKET) !== null && _b !== void 0 ? _b : \"\",\n                            Key: req.query.key,\n                        };\n                        S3.putObject(params, function (err, data) {\n                            if (err) {\n                                return reject({\n                                    error: true,\n                                    status: 500,\n                                    message: err.message,\n                                });\n                            }\n                            else {\n                                return resolve({\n                                    error: false,\n                                    status: 200,\n                                    result: data,\n                                    message: \"File Updated Successfully.\",\n                                });\n                            }\n                        });\n                    }\n                    catch (error) {\n                        return [2, reject({\n                                error: true,\n                                status: 500,\n                                message: \"Server error \" + error,\n                            })];\n                    }\n                    return [2];\n                });\n            });\n        });\n    },\n    mediaGet: function (req, res) {\n        return new Promise(function (resolve, reject) {\n            var _a;\n            return __awaiter(this, void 0, void 0, function () {\n                var getParams, readStream;\n                return __generator(this, function (_b) {\n                    try {\n                        getParams = {\n                            Bucket: (_a = process.env) === null || _a === void 0 ? void 0 : _a.BUCKET,\n                            Key: req.query.key,\n                        };\n                        readStream = S3.getObject(getParams).createReadStream();\n                        res.writeHead(200);\n                        readStream.pipe(res);\n                        return [2];\n                    }\n                    catch (err) {\n                        console.log(err, \"error =>>>\");\n                        return [2, reject({\n                                error: true,\n                                status: 400,\n                                message: \"Server error \" + err,\n                            })];\n                    }\n                    return [2];\n                });\n            });\n        });\n    },\n};\n\n\n//# sourceURL=webpack://company-site-be/./src/uploads/uploadService.ts?");

/***/ })

};
exports.runtime =
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("f9a93b4f18f423c64ca1")
/******/ })();
/******/ 
/******/ }
;